Best to use Object Literals:

const myObject = {
    property: 'Value!',
    ...
}

Accessed through dot or bracket notation.
Dot notation is the preferred method of accessing object properties.

Object Constructors:

Function Player(name, marker){
    --- Safeguards the Constructor from being called without using the new keyword
    if(!new.target){
        throw Error("....");
    }
    this.name = name;
    this.marker = marker;
    this.sayName = function(){
        console.log(this.name)
    };
}

const player = new Player('Steve', 'X');

Prototype:
- All objects have a Prototype.
- Prototype is another object. The reference to this Prototype value is store 
  in every instance of the object.
- Shared Properties and functions can be stored in Prototype to save memory. 
- Allows the usage of Prototypal Inheritance.

Ex. Recommended method for Prototypal Inheritance:

function Person(name) {
  this.name = name;
}

Person.prototype.sayName = function() {
  console.log(`Hello, I'm ${this.name}!`);
};

function Player(name, marker) {
  this.name = name;
  this.marker = marker;
}

Player.prototype.getMarker = function() {
  console.log(`My marker is '${this.marker}'`);
};

Object.getPrototypeOf(Player.prototype); // returns Object.prototype

// Now make `Player` objects inherit from `Person`
Object.setPrototypeOf(Player.prototype, Person.prototype);
Object.getPrototypeOf(Player.prototype); // returns Person.prototype

const player1 = new Player('steve', 'X');
const player2 = new Player('also steve', 'O');

player1.sayName(); // Hello, I'm steve!
player2.sayName(); // Hello, I'm also steve!

player1.getMarker(); // My marker is 'X'
player2.getMarker(); // My marker is 'O'




/------------------------Classes---------------------------------/
classes are 'special functions' 
defined

class Rectangle {
  Constructor(height, width){
    this.height = height;
    this.width = width;
  }
  sayWidth(){
    alert(this.width);
  }
}

let shape = new Rectangle(4,5);
shape.sayWidth();

Rectangle --> Rectangle.prototype.constructor: Constructor: Rectangle; sayWidth(): function

differences:
1. function created by the class label flips the [[isclassconstructor]]: true;
Classes require the use of the 'new' keyword.


example: 
class User {
  constructor() {}
}

alert(typeof User); // function
User(); // Error: Class constructor User cannot be invoked without 'new'

2. Class methods are non-enumerable. You will not be able to iterate through the methods (example: for .. in)
3. Class always 'use strict' 

can include getters/setters


example:


 class ClockT {

    constructor({template}){
      ***** you don't need to make a variable to store the template data ******
      this.template = template;
    }

    render() {
      let date = new Date();
  
      let hours = date.getHours();
      if (hours < 10) hours = '0' + hours;
  
      let mins = date.getMinutes();
      if (mins < 10) mins = '0' + mins;
  
      let secs = date.getSeconds();
      if (secs < 10) secs = '0' + secs;
  
      let output = this.template
        .replace('h', hours)
        .replace('m', mins)
        .replace('s', secs);
  
      console.log(output);
    };

    stop(){
      clearInterval(this.timer);
    };
  
    start(){
      this.render();
      this.timer = setInterval(() => this.render(), 1000);
    };
  }

  let clockT = new ClockT({template:'h:m:s'});
  clockT.start();
