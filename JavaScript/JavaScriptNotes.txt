Best to use Object Literals:

const myObject = {
    property: 'Value!',
    ...
}

Accessed through dot or bracket notation.
Dot notation is the preferred method of accessing object properties.

Object Constructors:

Function Player(name, marker){
    --- Safeguards the Constructor from being called without using the new keyword
    if(!new.target){
        throw Error("....");
    }
    this.name = name;
    this.marker = marker;
    this.sayName = function(){
        console.log(this.name)
    };
}

const player = new Player('Steve', 'X');

Prototype:
- All objects have a Prototype.
- Prototype is another object. The reference to this Prototype value is store 
  in every instance of the object.
- Shared Properties and functions can be stored in Prototype to save memory. 
- Allows the usage of Prototypal Inheritance.

Ex. Recommended method for Prototypal Inheritance:

function Person(name) {
  this.name = name;
}

Person.prototype.sayName = function() {
  console.log(`Hello, I'm ${this.name}!`);
};

function Player(name, marker) {
  this.name = name;
  this.marker = marker;
}

Player.prototype.getMarker = function() {
  console.log(`My marker is '${this.marker}'`);
};

Object.getPrototypeOf(Player.prototype); // returns Object.prototype

// Now make `Player` objects inherit from `Person`
Object.setPrototypeOf(Player.prototype, Person.prototype);
Object.getPrototypeOf(Player.prototype); // returns Person.prototype

const player1 = new Player('steve', 'X');
const player2 = new Player('also steve', 'O');

player1.sayName(); // Hello, I'm steve!
player2.sayName(); // Hello, I'm also steve!

player1.getMarker(); // My marker is 'X'
player2.getMarker(); // My marker is 'O'




